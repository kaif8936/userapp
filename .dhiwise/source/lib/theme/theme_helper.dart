import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.whiteA700,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.only(
              topLeft: Radius.circular(0.h),
              topRight: Radius.circular(0.h),
              bottomLeft: Radius.circular(16.h),
              bottomRight: Radius.circular(16.h),
            ),
          ),
          shadowColor: colorScheme.secondaryContainer.withOpacity(0.52),
          elevation: 16,
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.gray90001.withOpacity(0.1),
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      floatingActionButtonTheme: FloatingActionButtonThemeData(
        backgroundColor: appTheme.greenA400.withOpacity(0.25),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.whiteA700.withOpacity(0.1),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.gray500,
          fontSize: 16.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.gray90001,
          fontSize: 14.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray500,
          fontSize: 12.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        headlineSmall: TextStyle(
          color: appTheme.gray90001,
          fontSize: 24.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: colorScheme.primary,
          fontSize: 12.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w700,
        ),
        labelMedium: TextStyle(
          color: appTheme.gray90001,
          fontSize: 10.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: appTheme.gray90001,
          fontSize: 16.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 14.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF0D5DF8),
    primaryContainer: Color(0XFF29110A),
    secondary: Color(0XFF29110A),
    secondaryContainer: Color(0X330D5EF9),
    tertiary: Color(0XFF29110A),
    tertiaryContainer: Color(0X330D5EF9),

    // Background colors
    background: Color(0XFF29110A),

    // Surface colors
    surface: Color(0XFF29110A),
    surfaceTint: Color(0XFF29110A),
    surfaceVariant: Color(0X330D5EF9),

    // Error colors
    error: Color(0XFF29110A),
    errorContainer: Color(0X330D5EF9),
    onError: Color(0XFF28A757),
    onErrorContainer: Color(0XFF29110A),

    // On colors(text colors)
    onBackground: Color(0XFF28A757),
    onInverseSurface: Color(0XFF28A757),
    onPrimary: Color(0XFF29110A),
    onPrimaryContainer: Color(0XFF28A757),
    onSecondary: Color(0XFF28A757),
    onSecondaryContainer: Color(0XFF29110A),
    onTertiary: Color(0XFF28A757),
    onTertiaryContainer: Color(0XFF29110A),

    // Other colors
    outline: Color(0XFF29110A),
    outlineVariant: Color(0XFF29110A),
    scrim: Color(0XFF29110A),
    shadow: Color(0XFF29110A),

    // Inverse colors
    inversePrimary: Color(0XFF29110A),
    inverseSurface: Color(0XFF29110A),

    // Pending colors
    onSurface: Color(0XFF28A757),
    onSurfaceVariant: Color(0XFF29110A),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber500 => Color(0XFFFFC107);
  Color get amberA400 => Color(0XFFFFCC00);

  // Black
  Color get black900 => Color(0XFF000000);

  // Blacke
  Color get black9001e => Color(0X1E000000);

  // Blue
  Color get blue50 => Color(0XFFD9E8FF);
  Color get blueA200 => Color(0XFF4684FC);
  Color get blueA400 => Color(0XFF3378FB);
  Color get blueA40001 => Color(0XFF3176FB);
  Color get blueA40002 => Color(0XFF1877F2);
  Color get blueA700 => Color(0XFF1C68FA);

  // BlueAf
  Color get blueA4003f => Color(0X3F2D73FA);

  // BlueGray
  Color get blueGray400 => Color(0XFF888888);
  Color get blueGray900 => Color(0XFF282F3E);
  Color get blueGray90001 => Color(0XFF2F3438);
  Color get blueGray90084 => Color(0X8428303F);

  // DeepOrange
  Color get deepOrangeA400 => Color(0XFFF8290D);

  // Gray
  Color get gray200 => Color(0XFFEDEEEE);
  Color get gray50 => Color(0XFFF8F8F8);
  Color get gray500 => Color(0XFF94979F);
  Color get gray900 => Color(0XFF182529);
  Color get gray90001 => Color(0XFF181E22);
  Color get gray90002 => Color(0XFF171E22);
  Color get gray90014 => Color(0X141E1E1E);

  // Green
  Color get greenA400 => Color(0XFF13E486);
  Color get greenA700 => Color(0XFF0ED947);

  // Indigo
  Color get indigo900 => Color(0XFF27346A);

  // LightBlue
  Color get lightBlueA700 => Color(0XFF0088FF);

  // Orange
  Color get orangeA700 => Color(0XFFFF5C02);

  // Red
  Color get red600 => Color(0XFFEE3A43);
  Color get red800 => Color(0XFFDC1D1B);

  // Teal
  Color get teal50 => Color(0XFFD8EDF9);

  // White
  Color get whiteA700 => Color(0XFFFFFFFF);

  // Yellow
  Color get yellow400 => Color(0XFFFFDC64);
  Color get yellow800 => Color(0XFFF79E1B);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
